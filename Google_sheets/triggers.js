/**
 * Creates custom menu on spreadsheet open
 */
function onOpen() {
    onOpenPreloadCache();

    const ui = SpreadsheetApp.getUi();
    ui.createMenu('üì¶ AMANA')
        .addSubMenu(ui.createMenu('üìã Livraisons')
            .addItem('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ S√©lectionner les familles', 'showFamilySelectionDialog')
            .addItem('‚öôÔ∏è Assigner automatiquement', 'showAssignmentDialog')
            .addItem('üóÇÔ∏è G√©n√©rer toutes les fiches', 'showDialogGenerateAll')
            .addItem('üìÑ G√©n√©rer une fiche', 'showDialogGenerate')
            .addItem('üì¶ Voir besoins inventaire', 'showInventoryNeeds')
            .addItem('üìä √âtat d\'avancement', 'showDeliveryStatus'))
        .addSubMenu(ui.createMenu('üìß Notifications')
            .addItem('üì® Notifier tous (avec QR)', 'showDialogEnhancedNotifyAll')
            .addItem('üë§ Notifier un livreur', 'showDialogEnhancedNotify')
            .addItem('üßæ Rapport administrateur', 'showDialogAdminReport'))
        .addSubMenu(ui.createMenu('üìÑ Documents')
            .addItem('üìä Tableau de bord', 'showDialogDashboard')
            .addItem('üó∫Ô∏è Itin√©raire livreur', 'showDialogRouteMap')
            .addItem('üìà Exporter statistiques', 'exportStatistics'))
        .addSubMenu(ui.createMenu('üì± QR Codes')
            .addItem('üî≤ G√©n√©rer QR codes', 'showQRCodeDialog'))
        .addSubMenu(ui.createMenu('üë• Contacts')
            .addItem('üîÑ Synchroniser tous', 'syncAllContactsMenu')
            .addItem('‚ûï Cr√©er un contact', 'createContactForFamily'))
        .addSubMenu(ui.createMenu('üó∫Ô∏è G√©ocodage')
            .addItem('üìç G√©ocoder familles sans quartier', 'geocodeAllFamiliesMenu')
            .addItem('‚öôÔ∏è Configurer coordonn√©es association', 'setAssociationCoordsMenu'))
        .addSubMenu(ui.createMenu('‚öôÔ∏è Configuration')
            .addItem('üöÄ Configuration initiale', 'initialSetup')
            .addItem('üîó Configurer URL API', 'configureApiUrl')
            .addItem('üîê R√©g√©n√©rer token API', 'regenerateApiToken')
            .addItem('‚ÑπÔ∏è Infos API', 'showApiInfo')
            .addItem('üìÅ Configurer dossier Drive', 'configureDriveFolder')
            .addItem('‚è±Ô∏è Installer triggers', 'setupTriggers')
            .addItem('üìä Stats cache', 'showCacheStats'))
        .addSeparator()
        .addItem('üîÑ Rafra√Æchir le cache', 'refreshAllCache')
        .addToUi();
}

/**
 * Initial setup - Run ONCE after migration
 */
function initialSetup() {
    const ui = SpreadsheetApp.getUi();

    const response = ui.alert(
        'Configuration initiale',
        'Cette action va configurer votre syst√®me. Avez-vous:\n' +
        '1. Cr√©√© un dossier Drive pour les documents\n' +
        '2. Vos formulaires Google Forms pr√™ts\n' +
        '3. D√©ploy√© la Web App\n\n' +
        'Continuer?',
        ui.ButtonSet.YES_NO
    );

    if (response !== ui.Button.YES) {
        return;
    }

    const scriptProperties = PropertiesService.getScriptProperties();

    // Generate API token
    const token = Utilities.getUuid();
    scriptProperties.setProperty('API_TOKEN', token);

    // Show configuration instructions
    const message =
        '‚úÖ Token API g√©n√©r√©!\n\n' +
        `Token: ${token}\n\n` +
        '‚ö†Ô∏è SAUVEGARDEZ CE TOKEN!\n\n' +
        'Prochaines √©tapes:\n' +
        '1. Menu ‚Üí G√©ocodage ‚Üí Configurer coordonn√©es association\n' +
        '2. Menu ‚Üí Configuration ‚Üí Configurer dossier Drive\n' +
        '3. Menu ‚Üí Configuration ‚Üí Installer triggers\n' +
        '4. D√©ployez en Web App et configurez l\'URL API';

    ui.alert('Configuration', message, ui.ButtonSet.OK);
}

/**
 * Setup triggers - Run after initial setup
 */
function setupTriggers() {
    const ui = SpreadsheetApp.getUi();

    // Get form IDs
    const familyFormResult = ui.prompt(
        'ID Formulaire Famille',
        'Entrez l\'ID du formulaire famille (depuis l\'URL):',
        ui.ButtonSet.OK_CANCEL
    );

    if (familyFormResult.getSelectedButton() !== ui.Button.OK) {
        return;
    }

    const driverFormResult = ui.prompt(
        'ID Formulaire Livreur',
        'Entrez l\'ID du formulaire livreur (depuis l\'URL):',
        ui.ButtonSet.OK_CANCEL
    );

    if (driverFormResult.getSelectedButton() !== ui.Button.OK) {
        return;
    }

    const familyFormId = familyFormResult.getResponseText().trim();
    const driverFormId = driverFormResult.getResponseText().trim();

    // Save form IDs
    const scriptProperties = PropertiesService.getScriptProperties();
    scriptProperties.setProperty('FAMILY_FORM_ID', familyFormId);
    scriptProperties.setProperty('DRIVER_FORM_ID', driverFormId);

    // Remove existing triggers
    const triggers = ScriptApp.getProjectTriggers();
    triggers.forEach(trigger => ScriptApp.deleteTrigger(trigger));

    try {
        // Create family form trigger
        ScriptApp.newTrigger('onFamilyFormSubmit')
            .forForm(familyFormId)
            .onFormSubmit()
            .create();

        // Create driver form trigger
        ScriptApp.newTrigger('onDriverFormSubmit')
            .forForm(driverFormId)
            .onFormSubmit()
            .create();

        ui.alert('Succ√®s', '‚úÖ Triggers install√©s avec succ√®s!', ui.ButtonSet.OK);

    } catch (error) {
        ui.alert('Erreur', 'Erreur installation triggers:\n' + error.message, ui.ButtonSet.OK);
    }
}